name: deploy react application to EKS
on:
  #on push
  push:
    branches: [ "main" ]
  # on pull request
  pull_request:
    branches: [ "main" ]

jobs:
  build_test:
    # they type of runner to use
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [18]
      
    name: Node ${{ matrix.node }} sample 
    steps: 
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.ref }}
      # Make sure the value of GITHUB_TOKEN will not be persisted in repo's config
        persist-credentials: false
    
    - name: prettify code
      uses: creyD/prettier_action@v4.3
      with:
      # This part is also where you can pass other options, for example:
        prettier_options: --write **/*.{js,md}
        only_changed: True
        #set custom token
        github_token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
    - name: Run linting rules and tests
      uses: actions/setup-node@v3 
      with: 
        node-version: ${{matrix.node}}
    - run: npm ci
    - run: npm run lint 
    - run: npm run test

  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: checkout code  
      uses: actions/checkout@v3 
      
 # configure AWS credentials for deployment.
    - name: configure AWS credentials 
      uses: aws-actions/configure-aws-credentials@v1 
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1 
    
    - name: Build, tag, and push docker image Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: fullstack
        IMAGE_TAG: 1.0
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
    
    - name: Update kube config 
      run: aws eks update-kubeconfig --name terraform-eks-dev
    
    - name: Deploy to EKS 
      run: |
        kubectl apply -f secret.yml 
        kubectl apply -f deployment.yml
        kubectl apply -f service.yml
